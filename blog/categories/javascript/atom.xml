<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | Ingenious Coding]]></title>
  <link href="http://ingeniouscoding.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://ingeniouscoding.com/"/>
  <updated>2013-02-22T14:51:28-08:00</updated>
  <id>http://ingeniouscoding.com/</id>
  <author>
    <name><![CDATA[Stephen Crane]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Runtime function patching in JS]]></title>
    <link href="http://ingeniouscoding.com/blog/2012/08/17/runtime-function-patching-in-js/"/>
    <updated>2012-08-17T15:00:00-07:00</updated>
    <id>http://ingeniouscoding.com/blog/2012/08/17/runtime-function-patching-in-js</id>
    <content type="html"><![CDATA[<p>Have you ever needed to create a stub function which patched itself
with the real function at runtime? As part of some research I've been
working on lately, I found that I needed to do exactly this. Just to
make things more challenging this needed to be automated for <em>any</em>
valid JS function, no matter how crazy and convoluted. This post will
explore how I went about this and the rewriting I ended up with. I'll
try to stick fairly close to how my function patching code actually
evolved, but this should certainly not be treated as a history.</p>

<p><em>Disclaimer:</em> This is still a work in progress, and although it's been
tested with fairly large and comprehensive code bases, there may
certainly be edge cases I haven't thought of. Please comment or send
me a message if you find any!</p>

<h3>Background</h3>

<p>I'm currently working on a JavaScript source-to-source compiler which
transforms any arbitrary function into a string and defers the
execution and parsing of the function until it gets called (if
ever). To do this, the compiler needs to rewrite a function into a
stub which fetches and parses the original code, and then replaces
itself with the real function.</p>

<h3>Starting out</h3>

<p>Let's trace an example of rewriting a simple function. I'll be using
human readable variable names, but in a compiler all generated
variable names would need to be checked against current valid variable
names and/or be namespaced to not conflict with any existing variable
names.</p>

<p>Here's a simple example function to start out with:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Hello, world!&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// and actually execute the function</span>
</span><span class='line'><span class="nx">foo</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It turns out that in JavaScript you can assign a value to a function
name from inside that function. So, I started by simply replacing the
original function with the following stub:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">fooStr</span> <span class="o">=</span> <span class="s2">&quot;function() {console.log(&#39;Hello, world!&#39;);}&quot;</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">foo</span> <span class="o">=</span> <span class="nx">loadFunction</span><span class="p">(</span><span class="nx">fooStr</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">foo</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Note: We can do an analogous rewrite to anonymous functions assigned
to variables. Awesome, we just need to define <code>loadFunction</code> and we're
done, right? Shouldn't be too hard... Let's give it a try:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">loadFunction</span><span class="p">(</span><span class="nx">fnStr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">eval</span><span class="p">(</span><span class="nx">fnStr</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>There, that should just about do it... What's that you say?  <code>eval()</code>
is complaining about not being able to parse the function?  Oh, let's
see, it seems that the anonymous function needs to be wrapped in
parens so it can be parsed as a StatementExpression! Ok, fine:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">fooStr</span> <span class="o">=</span> <span class="s2">&quot;(function() {console.log(&#39;Hello, world!&#39;);})&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Awesome, it works now!</p>

<p>One thing to note here -- <code>loadFunction</code> needs to be in the same frame
(function scope) as the original function so that the function created
with <code>eval</code> closes over the same variables as the original function
would have. This means that nested functions will need a different
<code>loadFunction</code> at each nesting level containing a rewritten function
so the <code>eval</code> occurs in the correct scope.</p>

<h3>Patching references</h3>

<p>Now, we're not done yet... What if some other part of the code took a
reference to <code>foo</code> before it executed? Something simple like <code>var
fooAlias = foo;</code> would do this.  Now, <code>fooAlias</code> will get a reference
to the stub, and every time <code>fooAlias</code> was called, the function would
have to be recreated. This is, of course, horribly bad for
performance! While we can't replace references to the stub, we can
make the stub into a simple trampoline that stores the loaded function
and jumps to it if available. Although there are probably other ways
to do this, I chose to set the function string variable (<code>fooStr</code> in
this case) to null, and check to make sure it was a valid string
before the <code>eval</code>. With this change, the code now looks like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">loadFunction</span><span class="p">(</span><span class="nx">fnStr</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">fnStr</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="nb">eval</span><span class="p">(</span><span class="nx">fnStr</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="nx">fn</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">foo</span> <span class="o">=</span> <span class="nx">loadFunction</span><span class="p">(</span><span class="nx">fooStr</span><span class="p">,</span> <span class="nx">foo</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">fooStr</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">foo</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">fooAlias</span> <span class="o">=</span> <span class="nx">foo</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">fooAlias</span><span class="p">();</span>
</span><span class='line'><span class="nx">fooAlias</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The first time <code>fooAlias</code> is called, <code>fooStr</code> will be a valid string
and the function will be created as it should. The second call will
still result in a call to <code>loadFunction</code>, but this will immediately
return the replaced version of <code>foo</code>, without recreating it.</p>

<h3>Redefinition</h3>

<p>Well, now this is all fine and dandy, but does it work for all cases?
Unfortunately, as you may have guessed, not yet. First of all, what
happens if the code redefines <code>foo</code> after we rewrite it? (I ran into
this while trying to compile
<a href="https://github.com/kripken/BananaBread">BananaBread</a>, where a
function is redefined to extend it with a bit of new
functionality). For example:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">oldFoo</span> <span class="o">=</span> <span class="nx">foo</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;In the new foo&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">oldFoo</span><span class="p">();</span>
</span><span class='line'><span class="nx">foo</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>should output:</p>

<pre><code>foo
now in the new foo
</code></pre>

<p>Using the current transformation, we would rewrite this code to:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">fooStr1</span> <span class="o">=</span> <span class="s1">&#39;(function(){console.log(&quot;foo&quot;)})&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">fooStr2</span> <span class="o">=</span> <span class="s1">&#39;(function(){console.log(&quot;In the new foo&quot;)})&#39;</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">foo</span> <span class="o">=</span> <span class="nx">loadFunction</span><span class="p">(</span><span class="nx">fooStr1</span><span class="p">,</span> <span class="nx">foo</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">fooStr1</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">foo</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">oldFoo</span> <span class="o">=</span> <span class="nx">foo</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">foo</span> <span class="o">=</span> <span class="nx">loadFunction</span><span class="p">(</span><span class="nx">fooStr2</span><span class="p">,</span> <span class="nx">foo</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">fooStr2</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">foo</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">oldFoo</span><span class="p">();</span>
</span><span class='line'><span class="nx">foo</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>but this outputs:</p>

<pre><code>foo
foo
</code></pre>

<p>Wait a second! That's not what we expected! What happened? Well, if
you trace carefully, you will see that the call to <code>oldFoo()</code> on line
18 overwrites <code>foo</code> with the version of <code>foo</code> generated from
<code>fooStr1</code>.  This is then called as <code>foo()</code> on line 19 and the old
version is executed, rather than the correctly redefined version.</p>

<p>We can avoid this by overwriting the stub with the generated function
<em>only</em> when it has not been changed elsewhere. This is easily done by
checking that <code>foo === arguments.callee</code> before overwriting <code>foo</code> (be
careful here: <code>arguments.callee</code> is not the same as <code>this</code> in the
browser, as one might expect -- see
<a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/this">this MDN doc</a>
for more info).</p>

<p>With this change, the rewritten code now looks like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">fooStr1</span> <span class="o">=</span> <span class="s1">&#39;(function(){console.log(&quot;foo&quot;)})&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">fooStr2</span> <span class="o">=</span> <span class="s1">&#39;(function(){console.log(&quot;In the new foo&quot;)})&#39;</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">temp</span> <span class="o">=</span> <span class="nx">loadFunction</span><span class="p">(</span><span class="nx">fooStr1</span><span class="p">,</span> <span class="nx">foo</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">fooStr1</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">foo</span> <span class="o">===</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">)</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">foo</span> <span class="o">=</span> <span class="nx">temp</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">temp</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">oldFoo</span> <span class="o">=</span> <span class="nx">foo</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">temp</span> <span class="o">=</span> <span class="nx">loadFunction</span><span class="p">(</span><span class="nx">fooStr2</span><span class="p">,</span> <span class="nx">foo</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">fooStr2</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">foo</span> <span class="o">===</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">)</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">foo</span> <span class="o">=</span> <span class="nx">temp</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">temp</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">oldFoo</span><span class="p">();</span>
</span><span class='line'><span class="nx">foo</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This now works as expected. Unfortunately <code>loadFunction</code> will still get called
every time <code>oldFoo</code> is called, but fixing this would add length to the
stub, which I'd like to avoid.</p>

<p>Unfortunately we also need to keep track of each stub (and
replacement) so that <code>loadFunction</code> works correctly. Without this, a
second call to <code>oldFoo</code> which in turn calls <code>loadFunction</code>, returning
<code>foo</code>, will return the wrong version of <code>foo</code>! If that seems a bit
convoluted, it's probably because it is. Hopefully tracing through the
code will help:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">generated1</span> <span class="o">=</span> <span class="nx">foo</span><span class="p">,</span> <span class="nx">generated2</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">fooStr1</span> <span class="o">=</span> <span class="s1">&#39;(function(){console.log(&quot;foo&quot;)})&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">fooStr2</span> <span class="o">=</span> <span class="s1">&#39;(function(){console.log(&quot;In the new foo&quot;)})&#39;</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">generated1</span> <span class="o">=</span> <span class="nx">loadFunction</span><span class="p">(</span><span class="nx">fooStr1</span><span class="p">,</span> <span class="nx">generated1</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">fooStr1</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">foo</span> <span class="o">===</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">)</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">foo</span> <span class="o">=</span> <span class="nx">generated1</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">generated1</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">oldFoo</span> <span class="o">=</span> <span class="nx">foo</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">generated2</span> <span class="o">=</span> <span class="nx">loadFunction</span><span class="p">(</span><span class="nx">fooStr2</span><span class="p">,</span> <span class="nx">generated2</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">fooStr2</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">foo</span> <span class="o">===</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">)</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">foo</span> <span class="o">=</span> <span class="nx">generated2</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">generated2</span><span class="p">();</span>
</span><span class='line'><span class="p">},</span> <span class="nx">generated2</span> <span class="o">=</span> <span class="nx">foo</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">oldFoo</span><span class="p">();</span>
</span><span class='line'><span class="nx">foo</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This stores the stubs in <code>generated1</code> and <code>generated2</code> respectively,
and then overwrites these vars when the function is loaded, regardless
of whether we can replace the <code>foo</code> name itself. Pay special attention
to where these vars were assigned to. <code>generated1</code> must be assigned at
the top of the function because function declarations are lifted to
the top of their frame in JavaScript, and we cannot assign to
<code>generated2</code> until after <code>foo</code> is redefined.</p>

<p>All that's left now for the stub is to properly pass arguments and
context to the loaded function by using <code>.apply()</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">generated1</span> <span class="o">=</span> <span class="nx">loadFunction</span><span class="p">(</span><span class="nx">fooStr1</span><span class="p">,</span> <span class="nx">generated1</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">fooStr1</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">foo</span> <span class="o">===</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">)</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">foo</span> <span class="o">=</span> <span class="nx">generated1</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">generated1</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Properties</h3>

<p>Finally, there's one last piece of the puzzle -- copying over any
attributes that should be attached to the function being loaded, but
that instead were attached to the stub. For example:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">generated</span> <span class="o">=</span> <span class="nx">loadFunction</span><span class="p">(</span><span class="nx">fooStr</span><span class="p">,</span> <span class="nx">generated</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">fooStr</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">foo</span> <span class="o">===</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">)</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">foo</span> <span class="o">=</span> <span class="nx">generated</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">generated</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">prototypeMethod</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">foo</span><span class="p">.</span><span class="nx">objectMethod</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As you can see, <code>prototypeMethod</code> and <code>objectMethod</code> were attached to
the stub prototype and object. When <code>foo</code> is loaded and the stub
replaced, these methods disappear! We need to extend <code>loadFunction</code> to
copy any properties over to the loaded function like so:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">loadFunction</span><span class="p">(</span><span class="nx">fnStr</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">fnStr</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">temp</span> <span class="o">=</span> <span class="nb">eval</span><span class="p">(</span><span class="nx">fnStr</span><span class="p">);</span>
</span><span class='line'><span class="nx">temp</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">prop</span> <span class="k">in</span> <span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">temp</span><span class="p">[</span><span class="nx">prop</span><span class="p">]</span> <span class="o">=</span> <span class="nx">fn</span><span class="p">[</span><span class="nx">prop</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="nx">temp</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="nx">fn</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Putting it all together</h3>

<p>Here's my final version of function loading and patching for a typical
function:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">generated</span> <span class="o">=</span> <span class="nx">foo</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">loadFunction</span><span class="p">(</span><span class="nx">fnStr</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">fnStr</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">temp</span> <span class="o">=</span> <span class="nb">eval</span><span class="p">(</span><span class="nx">fnStr</span><span class="p">);</span>
</span><span class='line'><span class="nx">temp</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">prop</span> <span class="k">in</span> <span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">temp</span><span class="p">[</span><span class="nx">prop</span><span class="p">]</span> <span class="o">=</span> <span class="nx">fn</span><span class="p">[</span><span class="nx">prop</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="nx">temp</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="nx">fn</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">fooStr</span> <span class="o">=</span> <span class="s1">&#39;(function(){console.log(&quot;foo&quot;)})&#39;</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">generated</span> <span class="o">=</span> <span class="nx">loadFunction</span><span class="p">(</span><span class="nx">fooStr</span><span class="p">,</span> <span class="nx">generated</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">fooStr</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">foo</span> <span class="o">===</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">)</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">foo</span> <span class="o">=</span> <span class="nx">generated</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">generated</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">foo</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This covers every edge case that I could think of, and should work to
patch a function at runtime (as well as possible).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Low-Level JavaScript]]></title>
    <link href="http://ingeniouscoding.com/blog/2012/08/10/low-level-javascript/"/>
    <updated>2012-08-10T11:14:00-07:00</updated>
    <id>http://ingeniouscoding.com/blog/2012/08/10/low-level-javascript</id>
    <content type="html"><![CDATA[<p>This summer I'm taking a short break from grad school and working as a
research intern at Mozilla. Awesome experience so far, and it's great
to be back to working on open source projects! I don't think I've ever
cloned so many github repos in such a short time.</p>

<p>Ever wanted to have manual memory allocation in JavaScript? How about
types? One of the projects that I'm helping out with is
<a href="http://lljs.org">LLJS</a>, a typed dialect of JavaScript which resembles
C/C++. It features manual memory allocation when you want it,
co-existing alongside JavaScript's normal garbage-collected object
system. The goal here is to allow programmers to write fast JS code
with a familiar syntax. Definitely be sure to check out the
interactive demos to see examples of LLJS in action.</p>

<h3>What's new with LLJS?</h3>

<p>We recently added arrays, with both statically stack-allocated and
dynamically heap-allocated variants. These resemble C and C++ array
syntax, respectively. I also added <code>union</code> types, to complement our
existing <code>struct</code> types. These behave precisely as you would expect
from C. Recently I added syntax for defining structs and unions inside
other structs or unions, which significantly simplifies writings
structs.</p>

<p>I also worked on optimizing our malloc implementation, which is much
faster now. We use a naive malloc algorithm from the K&amp;R book, but
since we don't actually need to worry about paging, I modified this so
that all memory is on a single page. This cut out function calls for
allocating new pages, speeding allocation up quite a bit.</p>

<p>My mentor here at Mozilla, Michael Bebenita, added functions and
optional constructors to structs, which are beginning to look a lot
like C++ structs rather than C structs.</p>

<p>Finally, perhaps the most exciting new thing in LLJS is
<a href="http://disnetdev.com/blog/2012/07/18/memory-checking-in-low-level-javascript/">memory checking</a>!
Tim Disney, another intern here at Mozilla, implemented Valgrind style
memory checking for LLJS. It can currently detect the most common
memory errors: use after free, uninitialized reads, double frees, and
memory leaks.</p>

<h3>Esprima in LLJS</h3>

<p>As part of another project, I needed super fast JS parsing in
JS. Since I was already working with LLJS, I figured I might as well
try it out on a larger scale and see if I couldn't get
<a href="http://esprima.org/">Esprima</a> ported over to LLJS and using structs
for the generated AST. I hoped this would make an already fast parser
even faster and leaner by using manual memory allocation.</p>

<p>Well, over 4000 lines of LLJS later, I finished the port. String
handling is somewhat inefficient (it creates a new C string for every
string in the program), but it works! Check out the sources on
<a href="http://github.com/rinon/esprima-lljs">github</a> if you're interested.</p>

<p>So, was it faster? Well... not really. As it turns out, modern JS
engines are very good at allocating objects, so manual allocation does
not appear to be faster than the engine object allocation. The LLJS
version does use about %10 less memory when parsing large JS sources,
so that's a win. From some preliminary testing, traversing the AST
appears to be faster with LLJS, since property access is fast, but
this comes at the cost of making traversal code harder to write.</p>

<p>Where I think we can definitely win, though, is code which allocates
and frees code very often. Manual memory reuse and freeing could
provide speedups here over engine garbage collection for some
applications (note: I have yet to test this...).</p>

<h3>What's next?</h3>

<p>In the beginning of the summer I started off adding source map support
to LLJS, so that debug tools in the browser will show the
corresponding LLJS sources instead of the compiled JS sources. This is
mostly implemented in
<a href="http://github.com/Constellation/escodegen/">escodegen</a>, which we use
to generate the JS code from a rewritten AST. This got a little bogged
down due to a bug in the chrome devtools
(<a href="http://code.google.com/p/chromium/issues/detail?id=133854">not loading sources from a data URI source-map</a>),
so I haven't finished it off yet. Pretty much all that's left to do is
testing there, though.</p>

<p>As far as language features go, I will definitely be adding support
for <code>enum</code> types as soon as I get the chance. We are also looking at
implementing <a href="https://github.com/mbebenita/LLJS/issues/12">bit fields</a>
as a convenience for bit packing in structs.</p>

<p>If you have more ideas for where LLJS should head, please start an
issue on github or (even better) toss us a pull request. Most
importantly though, go try it out! If you find it helpful (or
frustrating), let us know.</p>
]]></content>
  </entry>
  
</feed>
