<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ingenious Coding]]></title>
  <link href="http://ingeniouscoding.com/atom.xml" rel="self"/>
  <link href="http://ingeniouscoding.com/"/>
  <updated>2013-02-22T14:51:28-08:00</updated>
  <id>http://ingeniouscoding.com/</id>
  <author>
    <name><![CDATA[Stephen Crane]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[On Editors]]></title>
    <link href="http://ingeniouscoding.com/blog/2013/02/22/on-editors/"/>
    <updated>2013-02-22T14:17:00-08:00</updated>
    <id>http://ingeniouscoding.com/blog/2013/02/22/on-editors</id>
    <content type="html"><![CDATA[<p>&#8220;What&#8217;s your favorite editor?&#8221; This question is almost bound to start a fight amongst even the most amiable of coders. <em>Nothing</em> boils programmer blood as much as an argument over dev tools. Of course, that never stops anyone from asking, and I&#8217;ve frequently debated the virtues of all sorts of programming tools, including of course the one true editor, Emacs.</p>

<p>Now, before you write me off as just another of those wacko Emacs users, hear me out. As much as I love Emacs, I firmly believe that every need deserves a careful look at which tool is best. For example, I am currently writing this post with a new tool I&#8217;m trying out, IA Writer, rather than my usual Emacs. I&#8217;ll give a run-down of a few of the tools I use, and the needs they fulfill, and hopefully this will help you out in your journey to find the best tools for the job.</p>

<p>First, a bit of background: I&#8217;ve used a multitude of editors and environments, from QBasic in Windows 3.1 to Visual Studio. I&#8217;ve ran Windows, Linux, and OS X as my daily work OS at various times. Now with that said, I don&#8217;t claim to be un-biased regarding programming tools. I am very partial to open source software, and will always choose the open source alternative if it is good enough for my needs.</p>

<p>What exactly are my needs? I write code on a daily basis, in a variety of languages. Lately, for example, I&#8217;ve needed to write C/C++, Java, Python, JavaScript, Latex, shell scripts, C#, PHP, and scrape together some HTML and CSS. My preference would naturally be to learn one tool that I can use for all these languages. I want to work as quickly and efficiently as possible, which means I need very useable tools. For me usability requires a simple, clean, keyboard-driven interface. I prefer to touch my mouse as little as possible while working, since the mouse disturbs my flow of work and is infinitely slower than a few quick key presses. Finally, for bonus points, I&#8217;d like my tools to be cross-platform since I switch back and forth on various machines and would like a somewhat consistent interface. So, this adds up to lots of languages, keyboard-friendly, and hopefully cross-platform.</p>

<p>These requirements leave me few choices for a primary editor: Kate (and similar basic text editors), Emacs, Vim, Eclipse, Netbeans, and Visual Studio. Visual Studio immediately fails my requirements, since it only excels for a small subset of the languages I use. However, I must admit that VS is easily the best tool I&#8217;ve found if you are primarily working in C# (sorry Monoâ€¦). I&#8217;m not a big fan of heavy IDE&#8217;s such as Eclipse and Netbeans, since they tend to be a bit slow for me. In addition, both tend to focus primarily on Java, which I use as rarely as possible out of personal preference. This leaves a choice of either a basic text editor such as Kate or Notepad++, or something more complex, such as Emacs or Vim. I used Kate for a long time as my primary editor, but I never looked back after eventually switching to Emacs. I also used Vim for about two years, but found that my brain didn&#8217;t work well with modal editing. Additionally, I was annoyed by the necessity to heavily customize Vim to make it useable for the way I work. I won&#8217;t dwell too much on comparing Emacs to other editors, however I hope you can make your own comparison from the features I highlight.</p>

<h2>Starting out with Emacs</h2>

<p>Now I&#8217;ve heard many complaints about the usability of Emacs, but most of this seems to stem from the complexity of shortcuts. First of all, you <em>must</em> use Caps Lock as your Control key to make any sense of Emacs. There&#8217;s just no way around it, since Control is so crucial and yet so far away on modern keyboard layouts. Second, most of the important keybinds fit on the front and back of a standard letter size paper. Print out the Emacs quick reference, stick it next to your keyboard, and you&#8217;ll quickly learn all the everyday shortcuts.</p>

<p>Unless otherwise noted, all code snippets should be placed in your <code>~/.emacs</code> file. For installing packages I try to use <a href="http://emacswiki.org/emacs/ELPA">ELPA</a>. Starting in the latest version (24), Emacs <em>finally</em> has built-in package installation support. This makes installing packages a breeze: <code>meta-x package-list-packages</code>, move the cursor to a package you want, hit <code>i</code> to mark for installation, then <code>x</code> to install. Done! ELPA can keep your packages up-to-date, and has a wide selection of common packages. I use the following config for access to all the usual repositories:</p>

<figure class='code'><figcaption><span>.emacs  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">package-archives</span> <span class="o">&#39;</span><span class="p">((</span><span class="s">&quot;gnu&quot;</span> <span class="o">.</span> <span class="s">&quot;http://elpa.gnu.org/packages/&quot;</span><span class="p">)</span>
</span><span class='line'>                         <span class="p">(</span><span class="s">&quot;marmalade&quot;</span> <span class="o">.</span> <span class="s">&quot;http://marmalade-repo.org/packages/&quot;</span><span class="p">)</span>
</span><span class='line'>                         <span class="p">(</span><span class="s">&quot;melpa&quot;</span> <span class="o">.</span> <span class="s">&quot;http://melpa.milkbox.net/packages/&quot;</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>How I use Emacs</h2>

<p>To give you a feel for how powerful Emacs is, I&#8217;ll describe a few of my favorite tricks and features, such as navigation, LaTeX integration, and gdb integration.</p>

<h3>Favorite Tricks</h3>

<p>I have a few favorite Emacs tricks and commands that I find terribly useful for what I need, and you might too.</p>

<p>I absolutely love <a href="http://orgmode.org/">org-mode</a>, but I think I would need to take an entire blog post to really do it justice. For now, I shall simply say that it is the simplest, greatest, all-around note-taking and organization software around. I know people who use Emacs solely for org-mode. It&#8217;s that good.</p>

<p><a href="http://www.gnu.org/software/emacs/manual/html_node/emacs/Editing-Binary-Files.html">Hexl-mode</a> is a fairly nice builtin, although not very feature-complete, hex-viewer. It works great for quickly viewing some binary data, but isn&#8217;t quite enough if you plan to do a lot of hex hacking.</p>

<p>While not really a trick, I love the way that Emacs handles indentation. Emacs always &#8220;does the right thing&#8221; after you set up your indent style, such as with this config:</p>

<figure class='code'><figcaption><span>.emacs  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">c-default-style</span> <span class="s">&quot;k&amp;r&quot;</span>
</span><span class='line'>      <span class="nv">c-basic-offset</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">default-tab-width</span> <span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hitting tab always indents the current line to the right position, regardless of where it started. This is great for making all of your indentation consistently perfect. If you need to re-indent a section, just select the section and hit <code>meta-\</code> to fix all the indentation in that section. While I&#8217;ve found most modes do a great job of auto-indentation, unfortunately the js2-mode and HTML modes tend to fall short. However, on the whole, I much prefer this single tab to indent style rather than forcing the programmer to think about how many times to hit tab.</p>

<h3>How to get around</h3>

<p>I like having a lot of buffers (files) open at once. In fact I&#8217;m guilty of this in general &#8211; my browser usually has at least 150 tabs open. Fortunately, Emacs makes this super easy. First, I need it to remember all my open files between sessions:</p>

<figure class='code'><figcaption><span>.emacs  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">desktop-save-mode</span> <span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>For a long time I simply used <code>ctrl-x b</code> to switch buffers. By default, this buffer switch does a few helpful things. The default buffer is the most recently used buffer, which is helpful for flipping back and forth between a few files, and older buffers are quickly accessibly via the up arrow. However, I found that <a href="http://emacswiki.org/emacs/InteractivelyDoThings">IDO</a> makes switching buffers and opening files <em>much</em> easier. IDO is an unobtrusive plugin which completes buffer and filenames as you type, generally in a natural manner. IDO is built in to recent versions of Emacs and is enabled with:</p>

<figure class='code'><figcaption><span>.emacs  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;ido</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">ido-mode</span> <span class="no">t</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I tend to use the following options for extra goodness:</p>

<figure class='code'><figcaption><span>.emacs  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">ido-everywhere</span> <span class="no">t</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">ido-enable-flex-matching</span> <span class="no">t</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">ido-create-new-buffer</span> <span class="ss">&#39;always</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">ido-enable-tramp-completion</span> <span class="no">nil</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">ido-confirm-unique-completion</span> <span class="no">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Modes</h3>

<p>As a grad student now, I tend to write a lot of stuff in LaTeX, so I need a good editing environment for that. Along with almost every other Emacs user, my mode of choice is <a href="http://www.gnu.org/software/auctex/">AUCTeX</a>, but I augment this with a few additions. First of all, I use the following settings for AUCTeX:</p>

<figure class='code'><figcaption><span>.emacs  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">TeX-PDF-mode</span> <span class="no">t</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;LaTeX-mode-hook</span> <span class="ss">&#39;visual-line-mode</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;LaTeX-mode-hook</span> <span class="ss">&#39;speck-mode</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;LaTeX-mode-hook</span> <span class="ss">&#39;LaTeX-math-mode</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;LaTeX-mode-hook</span> <span class="ss">&#39;writegood-mode</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;TeX-mode-hook</span> <span class="ss">&#39;zotelo-minor-mode</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;LaTeX-mode-hook</span> <span class="ss">&#39;turn-on-reftex</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">reftex-plug-into-AUCTeX</span> <span class="no">t</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>These settings set the default output to PDF, turn on visual line mode (line navigation respects soft-wraps), turn on <a href="http://www.emacswiki.org/SpeckMode">speck</a> mode for spell checking (an alternative to <a href="http://www.emacswiki.org/emacs/FlySpell">flyspell</a>, which is also great), turn on math mode for LaTeX since I write a lot of math, and turn on reftex and <a href="https://github.com/vitoshka/zotelo">integration with Zotero</a>, my reference manager. I won&#8217;t go into a lot of detail on these, since the manuals for each tool tend to be fairly good.</p>

<p>I have found that <a href="https://github.com/bnbeckwith/writegood-mode">writegood-mode</a> is great for keeping my writing clean and straightforward when I&#8217;m writing papers. It simply marks common errors such as repeated words, as well as uses of the passive voice, and weak or overused words. Try it out, and see what you think!</p>

<p>I use the usual modes for editing various sources, such as js2-mode, python-mode, etc. for syntax highlighting and other goodness. These modes are all available from ELPA, and a quick google or check of the Emacs wiki should point you in the right direction.</p>

<h3>GDB</h3>

<p>The gdb integration in Emacs is so useful it deserves a section of its own. To fire up gdb in emacs, simply use <code>meta-x gdb</code>. This will prompt you for a command to run gdb with, defaulting to the current executable if your working directory is simple enough to figure this out. You can use any of the usual gdb options here, but make sure that you keep the <code>-i=mi</code> bit at the beginning &#8211; this allows Emacs to integrate gdb nicely into its interface.</p>

<p>The best way to use gdb, assuming you have enough screen space, is the many-windows mode. Simply hit <code>meta-x gdb-many-windows</code> after starting a gdb session, and VoilÃ , you have a gdb prompt, current source file, local vars, breakpoints, etc. Breakpoints can be set in open source files simply by navigating to the line you want to break on and hitting <code>ctrl-x SPACE</code>. Breakpoints are disabled simply by finding the breakpoint in the breakpoints buffer and hitting <code>D</code> on it. Hitting spacebar on a breakpoint disables it. You can also do lots more fun things with gdb, such as open buffers for live memory dumps or disassembly views. Check out the manual for more details.</p>

<h2>Now go forth and conquer</h2>

<p>I keep my configs in git, which allows me to easily branch for any new machine or platform I&#8217;m running on. Check out my exact configs on <a href="http://github.com/rinon/configs">github</a> and let me know if you have any suggestions or comments!</p>

<p>I hope this post is useful to some, and that others would have great ideas that I can incorporate into my editing workflow. Please comment or contact me (links in the header) if you have any suggestions or comments!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Runtime function patching in JS]]></title>
    <link href="http://ingeniouscoding.com/blog/2012/08/17/runtime-function-patching-in-js/"/>
    <updated>2012-08-17T15:00:00-07:00</updated>
    <id>http://ingeniouscoding.com/blog/2012/08/17/runtime-function-patching-in-js</id>
    <content type="html"><![CDATA[<p>Have you ever needed to create a stub function which patched itself
with the real function at runtime? As part of some research I&#8217;ve been
working on lately, I found that I needed to do exactly this. Just to
make things more challenging this needed to be automated for <em>any</em>
valid JS function, no matter how crazy and convoluted. This post will
explore how I went about this and the rewriting I ended up with. I&#8217;ll
try to stick fairly close to how my function patching code actually
evolved, but this should certainly not be treated as a history.</p>

<p><em>Disclaimer:</em> This is still a work in progress, and although it&#8217;s been
tested with fairly large and comprehensive code bases, there may
certainly be edge cases I haven&#8217;t thought of. Please comment or send
me a message if you find any!</p>

<h3>Background</h3>

<p>I&#8217;m currently working on a JavaScript source-to-source compiler which
transforms any arbitrary function into a string and defers the
execution and parsing of the function until it gets called (if
ever). To do this, the compiler needs to rewrite a function into a
stub which fetches and parses the original code, and then replaces
itself with the real function.</p>

<h3>Starting out</h3>

<p>Let&#8217;s trace an example of rewriting a simple function. I&#8217;ll be using
human readable variable names, but in a compiler all generated
variable names would need to be checked against current valid variable
names and/or be namespaced to not conflict with any existing variable
names.</p>

<p>Here&#8217;s a simple example function to start out with:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Hello, world!&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// and actually execute the function</span>
</span><span class='line'><span class="nx">foo</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>It turns out that in JavaScript you can assign a value to a function
name from inside that function. So, I started by simply replacing the
original function with the following stub:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">fooStr</span> <span class="o">=</span> <span class="s2">&quot;function() {console.log(&#39;Hello, world!&#39;);}&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">foo</span> <span class="o">=</span> <span class="nx">loadFunction</span><span class="p">(</span><span class="nx">fooStr</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">foo</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note: We can do an analogous rewrite to anonymous functions assigned
to variables. Awesome, we just need to define <code>loadFunction</code> and we&#8217;re
done, right? Shouldn&#8217;t be too hard&#8230; Let&#8217;s give it a try:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">loadFunction</span><span class="p">(</span><span class="nx">fnStr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">eval</span><span class="p">(</span><span class="nx">fnStr</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There, that should just about do it&#8230; What&#8217;s that you say?  <code>eval()</code>
is complaining about not being able to parse the function?  Oh, let&#8217;s
see, it seems that the anonymous function needs to be wrapped in
parens so it can be parsed as a StatementExpression! Ok, fine:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">fooStr</span> <span class="o">=</span> <span class="s2">&quot;(function() {console.log(&#39;Hello, world!&#39;);})&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Awesome, it works now!</p>

<p>One thing to note here &#8211; <code>loadFunction</code> needs to be in the same frame
(function scope) as the original function so that the function created
with <code>eval</code> closes over the same variables as the original function
would have. This means that nested functions will need a different
<code>loadFunction</code> at each nesting level containing a rewritten function
so the <code>eval</code> occurs in the correct scope.</p>

<h3>Patching references</h3>

<p>Now, we&#8217;re not done yet&#8230; What if some other part of the code took a
reference to <code>foo</code> before it executed? Something simple like <code>var
fooAlias = foo;</code> would do this.  Now, <code>fooAlias</code> will get a reference
to the stub, and every time <code>fooAlias</code> was called, the function would
have to be recreated. This is, of course, horribly bad for
performance! While we can&#8217;t replace references to the stub, we can
make the stub into a simple trampoline that stores the loaded function
and jumps to it if available. Although there are probably other ways
to do this, I chose to set the function string variable (<code>fooStr</code> in
this case) to null, and check to make sure it was a valid string
before the <code>eval</code>. With this change, the code now looks like:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">loadFunction</span><span class="p">(</span><span class="nx">fnStr</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">fnStr</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">eval</span><span class="p">(</span><span class="nx">fnStr</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">fn</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">foo</span> <span class="o">=</span> <span class="nx">loadFunction</span><span class="p">(</span><span class="nx">fooStr</span><span class="p">,</span> <span class="nx">foo</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">fooStr</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">foo</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">fooAlias</span> <span class="o">=</span> <span class="nx">foo</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">fooAlias</span><span class="p">();</span>
</span><span class='line'><span class="nx">fooAlias</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first time <code>fooAlias</code> is called, <code>fooStr</code> will be a valid string
and the function will be created as it should. The second call will
still result in a call to <code>loadFunction</code>, but this will immediately
return the replaced version of <code>foo</code>, without recreating it.</p>

<h3>Redefinition</h3>

<p>Well, now this is all fine and dandy, but does it work for all cases?
Unfortunately, as you may have guessed, not yet. First of all, what
happens if the code redefines <code>foo</code> after we rewrite it? (I ran into
this while trying to compile
<a href="https://github.com/kripken/BananaBread">BananaBread</a>, where a
function is redefined to extend it with a bit of new
functionality). For example:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">oldFoo</span> <span class="o">=</span> <span class="nx">foo</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;In the new foo&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">oldFoo</span><span class="p">();</span>
</span><span class='line'><span class="nx">foo</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>should output:</p>

<pre><code>foo
now in the new foo
</code></pre>

<p>Using the current transformation, we would rewrite this code to:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">fooStr1</span> <span class="o">=</span> <span class="s1">&#39;(function(){console.log(&quot;foo&quot;)})&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">fooStr2</span> <span class="o">=</span> <span class="s1">&#39;(function(){console.log(&quot;In the new foo&quot;)})&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">foo</span> <span class="o">=</span> <span class="nx">loadFunction</span><span class="p">(</span><span class="nx">fooStr1</span><span class="p">,</span> <span class="nx">foo</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">fooStr1</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">foo</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">oldFoo</span> <span class="o">=</span> <span class="nx">foo</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">foo</span> <span class="o">=</span> <span class="nx">loadFunction</span><span class="p">(</span><span class="nx">fooStr2</span><span class="p">,</span> <span class="nx">foo</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">fooStr2</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">foo</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">oldFoo</span><span class="p">();</span>
</span><span class='line'><span class="nx">foo</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>but this outputs:</p>

<pre><code>foo
foo
</code></pre>

<p>Wait a second! That&#8217;s not what we expected! What happened? Well, if
you trace carefully, you will see that the call to <code>oldFoo()</code> on line
18 overwrites <code>foo</code> with the version of <code>foo</code> generated from
<code>fooStr1</code>.  This is then called as <code>foo()</code> on line 19 and the old
version is executed, rather than the correctly redefined version.</p>

<p>We can avoid this by overwriting the stub with the generated function
<em>only</em> when it has not been changed elsewhere. This is easily done by
checking that <code>foo === arguments.callee</code> before overwriting <code>foo</code> (be
careful here: <code>arguments.callee</code> is not the same as <code>this</code> in the
browser, as one might expect &#8211; see
<a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/this">this MDN doc</a>
for more info).</p>

<p>With this change, the rewritten code now looks like:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">fooStr1</span> <span class="o">=</span> <span class="s1">&#39;(function(){console.log(&quot;foo&quot;)})&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">fooStr2</span> <span class="o">=</span> <span class="s1">&#39;(function(){console.log(&quot;In the new foo&quot;)})&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">temp</span> <span class="o">=</span> <span class="nx">loadFunction</span><span class="p">(</span><span class="nx">fooStr1</span><span class="p">,</span> <span class="nx">foo</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">fooStr1</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">foo</span> <span class="o">===</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">foo</span> <span class="o">=</span> <span class="nx">temp</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">temp</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">oldFoo</span> <span class="o">=</span> <span class="nx">foo</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">temp</span> <span class="o">=</span> <span class="nx">loadFunction</span><span class="p">(</span><span class="nx">fooStr2</span><span class="p">,</span> <span class="nx">foo</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">fooStr2</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">foo</span> <span class="o">===</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">foo</span> <span class="o">=</span> <span class="nx">temp</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">temp</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">oldFoo</span><span class="p">();</span>
</span><span class='line'><span class="nx">foo</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>This now works as expected. Unfortunately <code>loadFunction</code> will still get called
every time <code>oldFoo</code> is called, but fixing this would add length to the
stub, which I&#8217;d like to avoid.</p>

<p>Unfortunately we also need to keep track of each stub (and
replacement) so that <code>loadFunction</code> works correctly. Without this, a
second call to <code>oldFoo</code> which in turn calls <code>loadFunction</code>, returning
<code>foo</code>, will return the wrong version of <code>foo</code>! If that seems a bit
convoluted, it&#8217;s probably because it is. Hopefully tracing through the
code will help:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">generated1</span> <span class="o">=</span> <span class="nx">foo</span><span class="p">,</span> <span class="nx">generated2</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">fooStr1</span> <span class="o">=</span> <span class="s1">&#39;(function(){console.log(&quot;foo&quot;)})&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">fooStr2</span> <span class="o">=</span> <span class="s1">&#39;(function(){console.log(&quot;In the new foo&quot;)})&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">generated1</span> <span class="o">=</span> <span class="nx">loadFunction</span><span class="p">(</span><span class="nx">fooStr1</span><span class="p">,</span> <span class="nx">generated1</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">fooStr1</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">foo</span> <span class="o">===</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">foo</span> <span class="o">=</span> <span class="nx">generated1</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">generated1</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">oldFoo</span> <span class="o">=</span> <span class="nx">foo</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">generated2</span> <span class="o">=</span> <span class="nx">loadFunction</span><span class="p">(</span><span class="nx">fooStr2</span><span class="p">,</span> <span class="nx">generated2</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">fooStr2</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">foo</span> <span class="o">===</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">foo</span> <span class="o">=</span> <span class="nx">generated2</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">generated2</span><span class="p">();</span>
</span><span class='line'><span class="p">},</span> <span class="nx">generated2</span> <span class="o">=</span> <span class="nx">foo</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">oldFoo</span><span class="p">();</span>
</span><span class='line'><span class="nx">foo</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>This stores the stubs in <code>generated1</code> and <code>generated2</code> respectively,
and then overwrites these vars when the function is loaded, regardless
of whether we can replace the <code>foo</code> name itself. Pay special attention
to where these vars were assigned to. <code>generated1</code> must be assigned at
the top of the function because function declarations are lifted to
the top of their frame in JavaScript, and we cannot assign to
<code>generated2</code> until after <code>foo</code> is redefined.</p>

<p>All that&#8217;s left now for the stub is to properly pass arguments and
context to the loaded function by using <code>.apply()</code>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">generated1</span> <span class="o">=</span> <span class="nx">loadFunction</span><span class="p">(</span><span class="nx">fooStr1</span><span class="p">,</span> <span class="nx">generated1</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">fooStr1</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">foo</span> <span class="o">===</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">foo</span> <span class="o">=</span> <span class="nx">generated1</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">generated1</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Properties</h3>

<p>Finally, there&#8217;s one last piece of the puzzle &#8211; copying over any
attributes that should be attached to the function being loaded, but
that instead were attached to the stub. For example:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">generated</span> <span class="o">=</span> <span class="nx">loadFunction</span><span class="p">(</span><span class="nx">fooStr</span><span class="p">,</span> <span class="nx">generated</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">fooStr</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">foo</span> <span class="o">===</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">foo</span> <span class="o">=</span> <span class="nx">generated</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">generated</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">prototypeMethod</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">foo</span><span class="p">.</span><span class="nx">objectMethod</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, <code>prototypeMethod</code> and <code>objectMethod</code> were attached to
the stub prototype and object. When <code>foo</code> is loaded and the stub
replaced, these methods disappear! We need to extend <code>loadFunction</code> to
copy any properties over to the loaded function like so:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">loadFunction</span><span class="p">(</span><span class="nx">fnStr</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">fnStr</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">temp</span> <span class="o">=</span> <span class="nb">eval</span><span class="p">(</span><span class="nx">fnStr</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">temp</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">prop</span> <span class="k">in</span> <span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">temp</span><span class="p">[</span><span class="nx">prop</span><span class="p">]</span> <span class="o">=</span> <span class="nx">fn</span><span class="p">[</span><span class="nx">prop</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">temp</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">fn</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Putting it all together</h3>

<p>Here&#8217;s my final version of function loading and patching for a typical
function:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">generated</span> <span class="o">=</span> <span class="nx">foo</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">loadFunction</span><span class="p">(</span><span class="nx">fnStr</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">fnStr</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">temp</span> <span class="o">=</span> <span class="nb">eval</span><span class="p">(</span><span class="nx">fnStr</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">temp</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">prop</span> <span class="k">in</span> <span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">temp</span><span class="p">[</span><span class="nx">prop</span><span class="p">]</span> <span class="o">=</span> <span class="nx">fn</span><span class="p">[</span><span class="nx">prop</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">temp</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">fn</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">fooStr</span> <span class="o">=</span> <span class="s1">&#39;(function(){console.log(&quot;foo&quot;)})&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">generated</span> <span class="o">=</span> <span class="nx">loadFunction</span><span class="p">(</span><span class="nx">fooStr</span><span class="p">,</span> <span class="nx">generated</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">fooStr</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">foo</span> <span class="o">===</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">foo</span> <span class="o">=</span> <span class="nx">generated</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">generated</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">foo</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>This covers every edge case that I could think of, and should work to
patch a function at runtime (as well as possible).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Low-Level JavaScript]]></title>
    <link href="http://ingeniouscoding.com/blog/2012/08/10/low-level-javascript/"/>
    <updated>2012-08-10T11:14:00-07:00</updated>
    <id>http://ingeniouscoding.com/blog/2012/08/10/low-level-javascript</id>
    <content type="html"><![CDATA[<p>This summer I&#8217;m taking a short break from grad school and working as a
research intern at Mozilla. Awesome experience so far, and it&#8217;s great
to be back to working on open source projects! I don&#8217;t think I&#8217;ve ever
cloned so many github repos in such a short time.</p>

<p>Ever wanted to have manual memory allocation in JavaScript? How about
types? One of the projects that I&#8217;m helping out with is
<a href="http://lljs.org">LLJS</a>, a typed dialect of JavaScript which resembles
C/C++. It features manual memory allocation when you want it,
co-existing alongside JavaScript&#8217;s normal garbage-collected object
system. The goal here is to allow programmers to write fast JS code
with a familiar syntax. Definitely be sure to check out the
interactive demos to see examples of LLJS in action.</p>

<h3>What&#8217;s new with LLJS?</h3>

<p>We recently added arrays, with both statically stack-allocated and
dynamically heap-allocated variants. These resemble C and C++ array
syntax, respectively. I also added <code>union</code> types, to complement our
existing <code>struct</code> types. These behave precisely as you would expect
from C. Recently I added syntax for defining structs and unions inside
other structs or unions, which significantly simplifies writings
structs.</p>

<p>I also worked on optimizing our malloc implementation, which is much
faster now. We use a naive malloc algorithm from the K&amp;R book, but
since we don&#8217;t actually need to worry about paging, I modified this so
that all memory is on a single page. This cut out function calls for
allocating new pages, speeding allocation up quite a bit.</p>

<p>My mentor here at Mozilla, Michael Bebenita, added functions and
optional constructors to structs, which are beginning to look a lot
like C++ structs rather than C structs.</p>

<p>Finally, perhaps the most exciting new thing in LLJS is
<a href="http://disnetdev.com/blog/2012/07/18/memory-checking-in-low-level-javascript/">memory checking</a>!
Tim Disney, another intern here at Mozilla, implemented Valgrind style
memory checking for LLJS. It can currently detect the most common
memory errors: use after free, uninitialized reads, double frees, and
memory leaks.</p>

<h3>Esprima in LLJS</h3>

<p>As part of another project, I needed super fast JS parsing in
JS. Since I was already working with LLJS, I figured I might as well
try it out on a larger scale and see if I couldn&#8217;t get
<a href="http://esprima.org/">Esprima</a> ported over to LLJS and using structs
for the generated AST. I hoped this would make an already fast parser
even faster and leaner by using manual memory allocation.</p>

<p>Well, over 4000 lines of LLJS later, I finished the port. String
handling is somewhat inefficient (it creates a new C string for every
string in the program), but it works! Check out the sources on
<a href="http://github.com/rinon/esprima-lljs">github</a> if you&#8217;re interested.</p>

<p>So, was it faster? Well&#8230; not really. As it turns out, modern JS
engines are very good at allocating objects, so manual allocation does
not appear to be faster than the engine object allocation. The LLJS
version does use about %10 less memory when parsing large JS sources,
so that&#8217;s a win. From some preliminary testing, traversing the AST
appears to be faster with LLJS, since property access is fast, but
this comes at the cost of making traversal code harder to write.</p>

<p>Where I think we can definitely win, though, is code which allocates
and frees code very often. Manual memory reuse and freeing could
provide speedups here over engine garbage collection for some
applications (note: I have yet to test this&#8230;).</p>

<h3>What&#8217;s next?</h3>

<p>In the beginning of the summer I started off adding source map support
to LLJS, so that debug tools in the browser will show the
corresponding LLJS sources instead of the compiled JS sources. This is
mostly implemented in
<a href="http://github.com/Constellation/escodegen/">escodegen</a>, which we use
to generate the JS code from a rewritten AST. This got a little bogged
down due to a bug in the chrome devtools
(<a href="http://code.google.com/p/chromium/issues/detail?id=133854">not loading sources from a data URI source-map</a>),
so I haven&#8217;t finished it off yet. Pretty much all that&#8217;s left to do is
testing there, though.</p>

<p>As far as language features go, I will definitely be adding support
for <code>enum</code> types as soon as I get the chance. We are also looking at
implementing <a href="https://github.com/mbebenita/LLJS/issues/12">bit fields</a>
as a convenience for bit packing in structs.</p>

<p>If you have more ideas for where LLJS should head, please start an
issue on github or (even better) toss us a pull request. Most
importantly though, go try it out! If you find it helpful (or
frustrating), let us know.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://ingeniouscoding.com/blog/2012/08/09/hello-world/"/>
    <updated>2012-08-09T18:34:00-07:00</updated>
    <id>http://ingeniouscoding.com/blog/2012/08/09/hello-world</id>
    <content type="html"><![CDATA[<h2>Test Post</h2>

<p>Just a test post to get things started. Not sure how often I&#8217;ll be
posting here, but I wanted someplace to write up a few of the things
I&#8217;m working on. More content will be coming soon!</p>
]]></content>
  </entry>
  
</feed>
